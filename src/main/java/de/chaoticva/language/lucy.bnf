{
  parserClass="de.chaoticva.language.parser.LucyParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lucy"
  psiImplClassSuffix="Impl"
  psiPackage="de.chaoticva.language.psi"
  psiImplPackage="de.chaoticva.language.psi.impl"

  elementTypeHolderClass="de.chaoticva.language.psi.LucyTypes"
  elementTypeClass="de.chaoticva.language.psi.LucyElementType"
  tokenTypeClass="de.chaoticva.language.psi.LucyTokenType"

  psiImplUtilClass="de.chaoticva.language.psi.impl.LucyPsiImplUtil"
}

lucyFile ::= (COMMENT|(varDef SEMI)|defDef|(OPEN_BRACE scope CLOSE_BRACE)|(defCall SEMI)|(reassign SEMI)|ifDef|instanceDef)*

instanceDef ::= NEW identifier (OPEN_PAREN (argument (COMMA argument)*)? CLOSE_PAREN)?

varDef ::= CONST? VAR type identifier ASSIGN expr {
    methods=[getName getNameEl getValue isConst]
}

identifier ::= IDENTIFIER_

expr ::= factor ((operator factor)*)? {
    methods=[getValue getType]
}

factor ::= NUMBER|STRING|CHAR|BOOLEAN|OPEN_PAREN expr CLOSE_PAREN|defCall|identifier|instanceDef

operator ::= PLUS|MINUS|ASTERISK|SLASH|EQUAL|NOT_EQUAL|LTE|GTE|OPEN_ANGLE|CLOSE_ANGLE

defDef ::= DEF type identifier OPEN_PAREN (parameter (COMMA parameter)*)? CLOSE_PAREN OPEN_BRACE scope CLOSE_BRACE {
    methods=[getName getNameIdentifier]
}

parameter ::= CONST? type identifier {
    methods=[getName getNameEl isConst]
}

type ::= identifier

scope ::= (COMMENT|(varDef SEMI)|(defCall SEMI)|(reassign SEMI)|ifDef|instanceDef)*

defCall ::= identifier OPEN_PAREN (argument (COMMA argument)*)? CLOSE_PAREN {
    methods=[getName getType]
}

argument ::= expr

reassign ::= identifier ASSIGN expr {
    methods=[getName]
}

ifDef ::= IF OPEN_PAREN condition (OR|AND condition)* CLOSE_PAREN OPEN_BRACE scope CLOSE_BRACE (ELSE (ifDef|OPEN_BRACE scope CLOSE_BRACE))?

condition ::= expr