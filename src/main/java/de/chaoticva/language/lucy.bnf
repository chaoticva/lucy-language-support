{
  parserClass="de.chaoticva.language.parser.LucyParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lucy"
  psiImplClassSuffix="Impl"
  psiPackage="de.chaoticva.language.psi"
  psiImplPackage="de.chaoticva.language.psi.impl"

  elementTypeHolderClass="de.chaoticva.language.psi.LucyTypes"
  elementTypeClass="de.chaoticva.language.psi.LucyElementType"
  tokenTypeClass="de.chaoticva.language.psi.LucyTokenType"

  psiImplUtilClass="de.chaoticva.language.psi.impl.LucyPsiImplUtil"
}

lucyFile ::= (COMMENT|(varDef SEMI)|defDef|(OPEN_BRACE scope CLOSE_BRACE)|(defCall SEMI)|(reassign SEMI))*

varDef ::= VAR IDENTIFIER type? ASSIGN expr {
    mixin="de.chaoticva.language.psi.impl.LucyNamedElementImpl"
    implements="de.chaoticva.language.psi.LucyNamedElement"
    methods=[getName getTypeText getValue setName getNameIdentifier]
}

expr ::= factor ((operator factor)*)? {
    methods=[getValue]
}

factor ::= NUMBER|STRING|BOOLEAN|OPEN_PAREN expr CLOSE_PAREN|defCall|IDENTIFIER

operator ::= PLUS|MINUS|ASTERISK|SLASH|EQUAL|NOT_EQUAL|LTE|GTE|OPEN_ANGLE|CLOSE_ANGLE

defDef ::= DEF IDENTIFIER OPEN_PAREN (parameter (COMMA parameter)*)? CLOSE_PAREN type? OPEN_BRACE scope CLOSE_BRACE {
    methods=[getName getTypeText]
}

parameter ::= IDENTIFIER type? {
    methods=[getName getTypeText]
}

type ::= COLON IDENTIFIER

scope ::= (COMMENT|(varDef SEMI)|(defCall SEMI)|(reassign SEMI))*

defCall ::= IDENTIFIER OPEN_PAREN (argument (COMMA argument)*)? CLOSE_PAREN

argument ::= expr

reassign ::= IDENTIFIER ASSIGN expr